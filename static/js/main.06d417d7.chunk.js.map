{"version":3,"sources":["components/SongList.js","actions/index.js","components/SongDetails.js","containers/App.js","reducers/index.js","serviceWorker.js","index.js"],"names":["SongList","_this","this","props","songs","map","song","react_default","a","createElement","className","key","title","onClick","selectSong","renderSongList","Component","connect","state","songList","type","payload","selectedSong","duration","style","color","App","components_SongList","SongDetails","combineReducers","arguments","length","undefined","action","Boolean","window","location","hostname","match","ReactDOM","render","es","store","createStore","reducers","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAGMA,kMACa,IAAAC,EAAAC,KACf,OAAOA,KAAKC,MAAMC,MAAMC,IAAI,SAAAC,GAC1B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,IAAKL,EAAKM,OAC9BL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,UACEC,UAAU,iBACVG,QAAS,kBAAMZ,EAAKE,MAAMW,WAAWR,KAFvC,gBAOFC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAKM,2CAMrC,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBR,KAAKa,2BAtB1BC,cAmCRC,cANS,SAAAC,GACtB,MAAO,CACLd,MAAOc,EAAMC,WAMf,CAAEL,WCtCsB,SAAAR,GACxB,MAAO,CACLc,KAAM,gBACNC,QAASf,KDiCEW,CAGbjB,GEhBaiB,cALS,SAAAC,GACtB,MAAO,CACLI,aAAcJ,EAAMI,eAGTL,CAtBI,SAAAd,GACjB,OAAKA,EAAMmB,aAMTf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,yBAAiBN,EAAMmB,aAAaV,OACpCL,EAAAC,EAAAC,cAAA,4BAAoBN,EAAMmB,aAAaC,YATpChB,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,MAAIe,MAAO,CAACC,MAAO,SAAnB,0BCiBOC,mLAjBX,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACkB,EAAD,OAEFpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACmB,EAAD,iBAVIZ,aCuBHa,cAAgB,CAC7BV,SAxBmB,WACnB,MAAO,CACL,CAAEP,MAAO,eAAgBW,SAAU,QACnC,CAAEX,MAAO,mBAAoBW,SAAU,QACvC,CAAEX,MAAO,kBAAmBW,SAAU,QACtC,CAAEX,MAAO,YAAaW,SAAU,QAChC,CAAEX,MAAO,YAAaW,SAAU,QAChC,CAAEX,MAAO,cAAeW,SAAU,QAClC,CAAEX,MAAO,eAAgBW,SAAU,QACnC,CAAEX,MAAO,MAAOW,SAAU,QAC1B,CAAEX,MAAO,QAASW,SAAU,QAC5B,CAAEX,MAAO,eAAgBW,SAAU,UAcrCD,aAV0B,WAAiC,IAAhCA,EAAgCQ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjB,KAAMG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC3D,MAAoB,kBAAhBC,EAAOb,KACFa,EAAOZ,QAETC,KCXWY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACLjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAUC,MAAOC,YAAYC,IACzBrC,EAAAC,EAAAC,cAACoC,EAAD,OAEFC,SAASC,eAAe,SDoHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.06d417d7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {selectSong} from \"../actions\";\r\nclass SongList extends Component {\r\n  renderSongList() {\r\n    return this.props.songs.map(song => {\r\n      return (\r\n        <div className=\"item\" key={song.title}>\r\n          <div className=\"right floated content\">\r\n            <button\r\n              className=\"ui button pink\"\r\n              onClick={() => this.props.selectSong(song)}\r\n            >\r\n              Select Song\r\n            </button>\r\n          </div>\r\n          <div className=\"content\">{song.title}</div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"ui card\">\r\n        <div className=\" content\">\r\n          <div className=\"ui divided list\">{this.renderSongList()}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    songs: state.songList\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { selectSong }\r\n)(SongList);\r\n","// Action Creator\r\n// Every Action Must Have type. payload is optional\r\nexport const selectSong = song => {\r\n  return {\r\n    type: \"SELECTED_SONG\",\r\n    payload: song\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst songDetail = props => {\r\n  if (!props.selectedSong) {\r\n    return <div>\r\n        <h1 style={{color: \"teal\"}}>Select a Song First</h1>\r\n    </div>;\r\n  }\r\n  return (\r\n    <div className=\"ui card teal\">\r\n      <div className=\"content\">\r\n        <h2>Details of Song</h2>\r\n        <h5>Song Title: {props.selectedSong.title}</h5>\r\n        <h5>Song Duration: {props.selectedSong.duration}</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    selectedSong: state.selectedSong\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(songDetail);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SongList from \"../components/SongList\";\nimport SongDetails from \"../components/SongDetails\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"ui container grid\">\n          <div className=\"ui row\">\n            <div className=\"column five wide\">\n              <SongList />\n            </div>\n            <div className=\"column five wide\">\n              <SongDetails />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\n\r\n// Two Reducers\r\n// Song List Reducer\r\nconst songsReducer = () => {\r\n  return [\r\n    { title: \"Thank u next\", duration: \"3.05\" },\r\n    { title: \"Lost In the Fire\", duration: \"4.50\" },\r\n    { title: \"Look Back at It\", duration: \"5.00\" },\r\n    { title: \"Going Bad\", duration: \"4.00\" },\r\n    { title: \"Bad Liar \", duration: \"6.30\" },\r\n    { title: \"Close To Me\", duration: \"4.05\" },\r\n    { title: \"This feeling\", duration: \"2.50\" },\r\n    { title: \"Mia\", duration: \"5.00\" },\r\n    { title: \"A Lot\", duration: \"4.00\" },\r\n    { title: \"MIDDLE CHILD\", duration: \"6.30\" }\r\n  ];\r\n};\r\n// Selected Song Reducer\r\nconst selectedSongReducer = (selectedSong = null, action) => {\r\n  if (action.type === \"SELECTED_SONG\") {\r\n    return action.payload;\r\n  }\r\n  return selectedSong;\r\n};\r\n\r\n// Combine 2 reducers\r\nexport default combineReducers({\r\n  songList: songsReducer,\r\n  selectedSong: selectedSongReducer\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport { createStore } from \"redux\";\nimport './index.css';\nimport App from './containers/App';\nimport reducers from \"./reducers\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={createStore(reducers)}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}